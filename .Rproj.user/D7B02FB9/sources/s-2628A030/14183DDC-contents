# tfunc, the statistic function T which is a function of rho
# dfunc, delta function, input a m tuple and return a scalar
# im the window size or tuple size
# vw the weights for deleting or downweighting blocks with length l
# ... other arguments for tfunc and dfunc
jackknife <- function(vx, tfunc, dfunc, im, vw, ...){
  iN = length(vx)
  nn = iN - im + 1
  il = length(vw)
  
  ftmp <- function(nter) return(dfunc(vx[nter:(nter+im-1)], ...))
  
  deltas = sapply(1:nn, ftmp)
  
  if(is.matrix(deltas)){
    deltas = t(deltas)
    rho = colMeans(deltas)
  }else rho = mean(deltas)
  
  # compute the statistic T = T(rho)
  TT = tfunc(rho, ...)
  
  # the two norms
  nw1 = sum(vw)
  nw22 = c(vw%*%vw)
  
  jack <- function(nter){
    weight = rep(1, nn); weight[nter:(nter+il-1)] = 1-vw
    # return T_j
    return(tfunc((weight %*% deltas)/(nn - nw1), ...))
  }
  
  TTT = sapply(1:(nn-il+1), jack)
  if(is.matrix(TTT)){
    JSig2 = rowMeans((TTT - rowMeans(TTT))^2) * (nn-nw1)^2 / nw22 / nn
  }else JSig2 = mean((TTT - mean(TTT))^2) * (nn-nw1)^2 / nw22 / nn
  
  return(list(T=TT, jack=TTT, sig2=JSig2))
}

vw1 = 1
vw2 = c(0.25,0.75,1,0.75,0.25)

# the AR(1) model
iN = 100
mdl <- list(ar = c(0.8))
vx <- arima.sim(model=mdl, iN)



# for first order autocorrelation
# dfunc vec 2, y_t and y_t-1
dfunc <- function(yy, my, vy){
  return(prod(yy - my)/vy)
}

tfunc <- function(rho, my, vy){
  return(rho)
}

# results
ret = jackknife(as.vector(vx), tfunc, dfunc, im=2, vw=vw1, my=mean(vx), vy=var(vx))
ret

ret = jackknife(as.vector(vx), tfunc, dfunc, im=2, vw=vw2, my=mean(vx), vy=var(vx))
ret

# acf
tmp = acf(vx)
tmp

#########
# for estimator of the AR(1)
dfunc <- function(yy, inv_xx){
  return(c(inv_xx %*% rbind(1, yy[1]) * yy[2]))
}

tfunc <- function(rho, inv_xx){
  return(rho)
}

inv_xx = cbind(1,vx[1:(length(vx)-1)])
inv_xx = chol2inv(chol(crossprod(inv_xx)/(length(vx)-1)))

# results
ret = jackknife(as.vector(vx), tfunc, dfunc, im=2, vw=vw1, inv_xx=inv_xx)
ret

ret = jackknife(as.vector(vx), tfunc, dfunc, im=2, vw=vw2, inv_xx=inv_xx)
ret
